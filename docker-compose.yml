services:

    postgres:
      image: postgres
      container_name: wallet_app_db
      restart: always
      env_file:
        - .env
      environment:
        - POSTGRES_USER=${DB_USER}
        - POSTGRES_PASSWORD=${DB_PASS}
        - POSTGRES_DB=${DB_NAME}
        - POSTGRES_PORT=${DB_PORT}
      volumes:
        - postgres_data:/var/lib/postgresql/data
        - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      healthcheck:
        test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
        interval: 10s
        retries: 5
        start_period: 30s
        timeout: 5s

  
    app:
      image: wallet_app
      container_name: wallet_app
      build:
        context: .
        dockerfile: Dockerfile
      restart: always
      env_file:
        - .env
      environment:
        - DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@postgres:${DB_PORT}/${DB_NAME}
      ports:
        - "8000:8000"
      command: uvicorn app.main:app --host 0.0.0.0 --port 8000
      depends_on:
        - postgres
      healthcheck:
        test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/api/v1/wallets"]
        interval: 10s
        retries: 5
        start_period: 10s
        timeout: 5s

    migrations:
      image: migrations
      container_name: migrations
      build:
        context: .
        dockerfile: Dockerfile
      command:
        alembic upgrade head
      depends_on:
        - postgres
      env_file:
        - .env
      environment:
        - DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@postgres:${DB_PORT}/${DB_NAME}
    dev:
      image: tests
      container_name: tests
      build:
        context: .
        dockerfile: Dockerfile
      env_file:
        - .env
      environment:
        - TEST_DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@postgres:${DB_PORT}/${DB_TEST_NAME}
      command: |
        bash -c "
        until pg_isready -h postgres -U ${DB_USER} -d ${DB_TEST_NAME}; do
          echo 'Waiting for database...'
          sleep 1
        done
        pytest app/tests
        "
      depends_on:
        postgres:
          condition: service_healthy
        app:
          condition: service_healthy


volumes:
  postgres_data:
